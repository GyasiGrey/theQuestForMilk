/*********************************
status.vc
Status ailments/enchantments stuff
**********************************/

int statustarget;

//holds status ailments
struct Status
{
	string sName;		//the name
	string sFuncString;	//the function that is called every tick
	int nPositive;		//1 if it's a good ailment, (enhancements), 0 if bad (venom)
}

Status Ailments[10];

void InitStatus()
{
	Ailments[0].sName = "Venom";
	Ailments[0].sFuncString = "VenomEffectFunc";
	Ailments[0].nPositive = 0;
	
	Ailments[1].sName = "Weaken Armor";
	Ailments[1].sFuncString = "WeakonArmorEffectFunc";
	Ailments[1].nPositive = 0;
	
	Ailments[2].sName = "Enhance Magic";
	Ailments[2].sFuncString = "EnhanceMagicEffectFunc";
	Ailments[2].nPositive = 1;

	Ailments[3].sName = "Charge Up";
	Ailments[3].sFuncString = "ChargeUpEffectFunc";
	Ailments[3].nPositive = 1;
	
	Ailments[4].sName = "Invisible";
	Ailments[4].sFuncString = "InvisibleEffectFunc";
	Ailments[4].nPositive = 1;
	
	Ailments[5].sName = "Hiding";
	Ailments[5].sFuncString = "InvisibleEffectFunc";
	Ailments[5].nPositive = 1;
}

void AddStatus(int _target, int _status, int _pow, int _time)
{
	InBattleChars[_target].nStatus[_status] = 1;
	InBattleChars[_target].nStatusTicks[_status] = _time;
	InBattleChars[_target].nStatusPow[_status] = _pow;
}

void RemoveStatus(int _target, int _status)
{
	int negone = 0;
	negone--;
	
	int negtwo = negone;
	negtwo--;
	
	int i;
	
	if(_status == negone)
	{
		for(i=0;i<10;i++)
		{
			InBattleChars[_target].nStatus[i] = 0;
			InBattleChars[_target].nStatusTicks[i] = 0;
			InBattleChars[_target].nStatusPow[i] = 0;
		}
	}
	else if(_status == negtwo)
	{
		//remove bad status only
		for(i=0;i<10;i++)
		{
			if(!Ailments[i].nPositive)
			{
				InBattleChars[_target].nStatus[i] = 0;
				InBattleChars[_target].nStatusTicks[i] = 0;
				InBattleChars[_target].nStatusPow[i] = 0;
			}
		}
	}
	else
	{
		InBattleChars[_target].nStatus[_status] = 0;
		InBattleChars[_target].nStatusTicks[_status] = 0;
		InBattleChars[_target].nStatusPow[i] = 0;
	}
}

int HasStatus(int _target, int _status)
{
	int i;

	int negone = 0;
	negone--;
	
	int negtwo = negone;
	negtwo--;
	
	if(_status == negone)
	{
		//_status == -1, check to see if they have any status
		for(i=0;i<10;i++)
		{
			if(InBattleChars[_target].nStatus[i] == 1)
			{
				return 1;
			}
		}		
	}
	else if(_status == negtwo)
	{
		//_status == -2, check to see if they have any BAD status
		for(i=0;i<10;i++)
		{
			if(!Ailments[i].nPositive)
			{
				if(InBattleChars[_target].nStatus[i] == 1)
				{
					return 1;
				}
			}
		}		
	}
	else
	{
		return InBattleChars[_target].nStatus[_status];
	}
	
	return 0;
}

void DoStatus(int _target)
{
	int i;

	i=0;

	for(i=0;i<10;i++)
	{
		if(InBattleChars[_target].nStatus[i])
		{
			statustarget = _target;
			CallFunction(Ailments[i].sFuncString);
			DrawScreen();
			DoWait();
			CheckDeath();
			InBattleChars[statustarget].nStatusTicks[i]--;
				
			if(InBattleChars[statustarget].nStatusTicks[i] <= 0)
			{
				RemoveStatus(statustarget, i);
				DrawScreen();
				DoWait();
			}
		}
	}
}


void EnhanceMagicEffectFunc()
{
	//each ticks the effect is lessend
	InBattleChars[statustarget].nMagicPow = InBattleChars[statustarget].nOriginalMagicPow + (InBattleChars[statustarget].nOriginalMagicPow * ((InBattleChars[statustarget].nStatusTicks[2]-1) * InBattleChars[statustarget].nStatusPow[2]/2)/100);
	InBattleChars[statustarget].nMagicDef = InBattleChars[statustarget].nOriginalMagicDef + (InBattleChars[statustarget].nOriginalMagicDef * ((InBattleChars[statustarget].nStatusTicks[2]-1) * InBattleChars[statustarget].nStatusPow[2]/2)/100);
	InBattleChars[statustarget].nMagicEvade = InBattleChars[statustarget].nOriginalMagicEvade + (InBattleChars[statustarget].nOriginalMagicEvade * ((InBattleChars[statustarget].nStatusTicks[2]-1) * InBattleChars[statustarget].nStatusPow[2]/2)/100);
	InBattleChars[statustarget].nMagicHit = InBattleChars[statustarget].nOriginalMagicHit + (InBattleChars[statustarget].nOriginalMagicHit * ((InBattleChars[statustarget].nStatusTicks[2]-1) * InBattleChars[statustarget].nStatusPow[2]/2)/100);
}

void ChargeUpEffectFunc()
{
	//each ticks the effect is lessend
	InBattleChars[statustarget].nAttackPow = InBattleChars[statustarget].nOriginalAttackPow + (InBattleChars[statustarget].nOriginalAttackPow * ((InBattleChars[statustarget].nStatusTicks[3]-1) * InBattleChars[statustarget].nStatusPow[3]/2)/100);
	InBattleChars[statustarget].nDefense = InBattleChars[statustarget].nOriginalDefense + (InBattleChars[statustarget].nOriginalDefense * ((InBattleChars[statustarget].nStatusTicks[3]-1) * InBattleChars[statustarget].nStatusPow[3]/2)/100);
	InBattleChars[statustarget].nEvade = InBattleChars[statustarget].nOriginalEvade + (InBattleChars[statustarget].nOriginalEvade * ((InBattleChars[statustarget].nStatusTicks[3]-1) * InBattleChars[statustarget].nStatusPow[3]/2)/100);
	InBattleChars[statustarget].nHit = InBattleChars[statustarget].nOriginalHit + (InBattleChars[statustarget].nOriginalHit * ((InBattleChars[statustarget].nStatusTicks[3]-1) * InBattleChars[statustarget].nStatusPow[3]/2)/100);
}

void WeakonArmorEffectFunc()
{
	//each ticks the effect is lessend
	InBattleChars[statustarget].nDefense = InBattleChars[statustarget].nOriginalDefense - (InBattleChars[statustarget].nOriginalDefense * ((InBattleChars[statustarget].nStatusTicks[1]-1) * InBattleChars[statustarget].nStatusPow[1]/2)/100);
}

void VenomEffectFunc()
{
	PlaySound(nVenomSound, 100);
	
	DrawScreen();
		
	int damage = Random(InBattleChars[statustarget].nStatusPow[0], InBattleChars[statustarget].nStatusPow[0]*2);

	//deal some damage
	InBattleChars[statustarget].nHp = InBattleChars[statustarget].nHp - damage;
	ShowActionText(str(damage), statustarget, RGB(255, 0, 0));
	CheckDeath();
}

void InvisibleEffectFunc()
{
	//this func dosen't do anything
	//when chars try to hit them, it will check there status for invis
}